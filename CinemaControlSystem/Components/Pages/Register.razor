@page "/"
@page "/register"
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ToastService toastService


<div class="wrapper">
    <div class="container-sm">
        <h1>Register</h1>
        <hr />
        @if(!this.isLoading){
            <EditForm Model="Model" OnSubmit="OnSubmit" FormName="registerform">
                <div class="form-group">
                    <label for="firstname">First Name</label>
                    <InputText @bind-Value=Model!.FirstName ParsingErrorMessage="Must be text value" />
                </div>
                <div class="form-group">
                    <label for="lastname">Last Name</label>
                    <InputText @bind-Value=Model!.LastName ParsingErrorMessage="Must be text value" />
                </div>
                <div class="form-group">
                    <label for="exampleInputEmail1">Email address</label>
                    <InputText @bind-Value=Model!.Email ParsingErrorMessage="Must be text value" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>
                <div class="form-group">
                    <label for="exampleInputPassword1">Password</label>
                    <InputText @bind-Value=Model!.Password ParsingErrorMessage="Must be text value" />
                </div>
                <button type="submit" class="btn btn-success">Submit</button>
                <button class="btn btn-primary" type="button" @onclick="goToLogIn">go to logIn</button>
            </EditForm>
        }
        else{
            <CinemaControlSystem.Components.Widgets.Loader></CinemaControlSystem.Components.Widgets.Loader>
        }
    </div>

</div>

@code {
    [SupplyParameterFromForm]
    private RegisterDTO? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private bool isLoading = false;

    async Task OnSubmit()
    {
        var response =  await AuthService.Register(Model!);
        if(response.isSuccess){
            toastService.ShowToast(response.Message, ToastLevel.Success);
            this.isLoading = true;
            // navigate to login 
            SetTimeOut.ExecuteAfterInterval(() =>
            {
                Navigation.NavigateTo("/login");
            }, 3000);
        }
        else{
            if(response.ErrorMessages != null){
                string errorMessages = String.Join("\n", response.ErrorMessages);
                toastService.ShowToast(errorMessages, ToastLevel.Error);
            }
            else if(response.Message != null){
                toastService.ShowToast(response.Message, ToastLevel.Error);
            }
        }
    }
    void goToLogIn(){
        Navigation.NavigateTo("/login");
    }
}