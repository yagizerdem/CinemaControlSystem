@page "/client/profile"
@layout ClientLayout
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProfileService<ClientProfile> ProfileService
@inject NavigationManager Navigation
@inject ToastService toastService
@inject IJSRuntime JSRuntime
@implements IDisposable

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CinemaControlSystem.Components.Widgets.ToastNotification />


<AuthorizationWrapper AllowedRole="@Roles.Client">


    <div class="container">
        <br />
        <h3>set preferances</h3>
        <hr />
        @if (!this.loading)
        {

            <div class="img-wrapper">
                <br />
                <h6>old profile img</h6>
                <img src="@(Model.profileImgUrl != null && Model.profileImgUrl.Trim().Length > 0
    ? Model.profileImgUrl
    : SD.anonimousProfileImage)" class="profileImage" />
                <br /> <br />
                <button type="button" @onclick="DeleteProfileImage" class="btn btn-danger custom-danger-button"><i class="fa-solid fa-trash"></i></button>
            </div>


            <EditForm Model="@Model" OnSubmit="HandleSubmit">
                <div class="form-group">
                    <label>Open Address</label>
                    <InputText @bind-Value="Model.openAddress"></InputText>
                </div>

                <div class="form-group">
                    <label>Remember LogIn</label>
                    <InputCheckbox @bind-Value="Model.rememberLogIn"></InputCheckbox>
                </div>
                <div class="form-group">
                    <label>Show Email</label>
                    <InputCheckbox @bind-Value="Model.showEmail"></InputCheckbox>
                </div>


                <div class="form-group">
                    <label>Select Profile Image</label>
                    <InputFile OnChange="HandleFileSelected"></InputFile>
                </div>
                <button type="submit" class="btn btn-success">Success</button>
            </EditForm>

            <br />

            <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
            MultiSelection="true" @bind-Value="value_" @bind-SelectedValues="options" T="string"
            Label="Film types" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
                @foreach (var type in moveiTypes)
                {
                    <MudSelectItem T="string" Value="@type">@type</MudSelectItem>
                }
            </MudSelect>
            <br />

            <br />
        }
        else
        {
            <Loader />
        }
        <br />
    </div>




</AuthorizationWrapper>



@code {


    // mud blazor multi selct
    private bool multiselectionTextChoice;
    private IEnumerable<string> options { get; set; } = new HashSet<string>() {SD.FilmTypes[0]};
    private string value_;

    private string[] moveiTypes = SD.FilmTypes;

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (_isDisposed) return string.Empty;

        if (multiselectionTextChoice)
        {
            return $"Selected film type {(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else
        {
            return $"{selectedValues.Count} state{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }

    //

    private bool _isDisposed;
    private CancellationTokenSource _cancellationTokenSource;


    private ClientProfileUpdateDTO Model = new();

    private IBrowserFile selectedFile;
    private string fileName;
    private byte[] fileContent;
    private bool isFileReady = false;
    private bool loading = false;

    public async void HandleSubmit()
    {
        if (_isDisposed) return;


        Model.preferancesCsv = String.Join(",", this.options.ToList());
        Model.fileContent = this.fileContent;

        var result = await this.ProfileService.UpsertClientProfile(Model);
        if (result.isSuccess)
        {
            this.loading = true;
            toastService.ShowToast(result.Message, ToastLevel.Success);
            SetTimeOut.ExecuteAfterInterval(() =>
            {
                Navigation.NavigateTo("/home");
            }, 3000);
            StateHasChanged();
        }
        else if (!_isDisposed)
        {
            toastService.ShowToast(string.Join("\n", result.ErrorMessages), ToastLevel.Error);
        }
    }

    public async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        fileName = selectedFile.Name;

        // Read the file into a byte array
        using var stream = new MemoryStream();
        await selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).CopyToAsync(stream); // 10 MB limit
        fileContent = stream.ToArray();

        isFileReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cancellationTokenSource = new CancellationTokenSource();
            try
            {
                loading = true;
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                var userId = user.FindFirst("userId")?.Value;

                ClientProfile clientProfile = await ProfileService.FetchProfileByUserId(userId);
                this.Model.AppUserId = userId;

                if (clientProfile != null && !_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    // related to ui beacuse of that update state
                    this.Model.showEmail = clientProfile.showEmail;
                    this.Model.openAddress = clientProfile.openAddress;
                    this.Model.preferancesCsv = clientProfile.preferancesCsv;
                    this.Model.rememberLogIn = clientProfile.rememberLogIn;
                    this.Model.profileImgUrl = clientProfile.profileImgUrl;

                    // set state for mud blazor ui muitple select list 
                    this.options = clientProfile.preferancesCsv.Split(",").ToHashSet<string>();
                }

            }
            catch (Exception ex)
            {
                string message = $"Error occured : {ex.Message}";
                Console.WriteLine(message);
            }
            finally
            {
                if (!_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    loading = false;
                    StateHasChanged();
                }
            }
        }
    }

    public void Dispose()
    {
        if (!_isDisposed)
        {
            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource?.Dispose();
        }
    }

    public void DeleteProfileImage(){
        if (!_isDisposed)
        {
            Model.profileImgUrl = String.Empty;    
            StateHasChanged();
        }
    }

}
