@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService ToastService

@ChildContent

@code {

    [Parameter] public string AllowedRole { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } // Accepts child HTML or components

    private bool isAuthorized = false;
    private bool isLoading = true;

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                // var username = user.Identity.Name; // This retrieves the `Name` claim
                var role = user.FindFirst(ClaimTypes.Role)?.Value; // Retrieve the `Role` claim
                                                                   // var id = user.FindFirst("userId")?.Value;

                if(AllowedRole != null && AllowedRole != role){
                    ToastService.ShowToast("User is not authorized", ToastLevel.Error);
                    Navigation.NavigateTo("/home"); // Redirect to login page
                    return;
                }

                isAuthorized = true; // User is authenticated
            }
            else
            {
                ToastService.ShowToast("User is not authenticated", ToastLevel.Error);
                Navigation.NavigateTo("/login"); // Redirect to login page
            }

            isLoading = false;
            StateHasChanged();
         }
    }
}