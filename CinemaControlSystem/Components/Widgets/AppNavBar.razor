@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject IProfileService<ClientProfile> ProfileService

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="/home">Cinema Contorl Sytem</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">

            </ul>
            <form class="d-flex" role="search">
                <img class="profile-img" src="@profileImageUrl" @onclick="GoToProfile" />
                <button class="btn btn-outline-danger" type="button" @onclick="LogOut">log out</button>
            </form>
        </div>
    </div>
</nav>

<script>
    function reloadWindow() {
    window.location.reload();
    }
</script>


@code {
    private string? role = null;
    private string? profileImageUrl = SD.anonimousProfileImage;

    [Parameter] public EventCallback OnInitializedCompleted { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                role = user.FindFirst(ClaimTypes.Role)?.Value; // Retrieve the `Role` claim
                var id = user.FindFirst("userId")?.Value;

                var result = await ProfileService.FetchProfileByUserId(id);

                if(result != null && result.profileImgUrl.Trim().Length > 0){
                    profileImageUrl = result.profileImgUrl;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                string message = $"Error occured : {ex.Message}";
                Console.WriteLine(message);
            }finally{
                await OnInitializedCompleted.InvokeAsync();
            }
        }
    }


    public async void LogOut(){
        await LocalStorage.RemoveItemAsync(SD.authTokenName);
        await JSRuntime.InvokeVoidAsync("reloadWindow");
    }
    public void GoToProfile(){
        switch(role){
            case Roles.Client:
                Navigation.NavigateTo("/client/profile", forceLoad: true);
                break;
            default:
                break;
        }
    }
}
